diff --git a/index.js b/index.js
index eb057b6191d51c5cd749ca86c892ce47f66bb09c..fa84539c4a6c918ec9467617c7d183d597e94169 100644
--- a/index.js
+++ b/index.js
@@ -1,6 +1,6 @@
 /*
 How it works:
-`this.#head` is an instance of `Node` which keeps track of its current value and nests another instance of `Node` that keeps the value that comes after it. When a value is provided to `.enqueue()`, the code needs to iterate through `this.#head`, going deeper and deeper to find the last value. However, iterating through every single item is slow. This problem is solved by saving a reference to the last value as `this.#tail` so that it can reference it to add a new value.
+`this.head` is an instance of `Node` which keeps track of its current value and nests another instance of `Node` that keeps the value that comes after it. When a value is provided to `.enqueue()`, the code needs to iterate through `this.head`, going deeper and deeper to find the last value. However, iterating through every single item is slow. This problem is solved by saving a reference to the last value as `this.tail` so that it can reference it to add a new value.
 */
 
 class Node {
@@ -13,9 +13,9 @@ class Node {
 }
 
 export default class Queue {
-	#head;
-	#tail;
-	#size;
+	head;
+	tail;
+	size;
 
 	constructor() {
 		this.clear();
@@ -24,51 +24,51 @@ export default class Queue {
 	enqueue(value) {
 		const node = new Node(value);
 
-		if (this.#head) {
-			this.#tail.next = node;
-			this.#tail = node;
+		if (this.head) {
+			this.tail.next = node;
+			this.tail = node;
 		} else {
-			this.#head = node;
-			this.#tail = node;
+			this.head = node;
+			this.tail = node;
 		}
 
-		this.#size++;
+		this.size++;
 	}
 
 	dequeue() {
-		const current = this.#head;
+		const current = this.head;
 		if (!current) {
 			return;
 		}
 
-		this.#head = this.#head.next;
-		this.#size--;
+		this.head = this.head.next;
+		this.size--;
 		return current.value;
 	}
 
 	peek() {
-		if (!this.#head) {
+		if (!this.head) {
 			return;
 		}
 
-		return this.#head.value;
+		return this.head.value;
 
 		// TODO: Node.js 18.
-		// return this.#head?.value;
+		// return this.head?.value;
 	}
 
 	clear() {
-		this.#head = undefined;
-		this.#tail = undefined;
-		this.#size = 0;
+		this.head = undefined;
+		this.tail = undefined;
+		this.size = 0;
 	}
 
 	get size() {
-		return this.#size;
+		return this.size;
 	}
 
 	* [Symbol.iterator]() {
-		let current = this.#head;
+		let current = this.head;
 
 		while (current) {
 			yield current.value;
